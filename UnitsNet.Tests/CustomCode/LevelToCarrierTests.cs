//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class LevelToCarrierTests : LevelToCarrierTestsBase
    {
        /// <inheritdoc/>
        protected override bool SupportsSIUnitSystem => false;

        /// <inheritdoc/>
        protected override double DecibelsCarrierInOneDecibelCarrier => 1;

        /// <inheritdoc/>
        protected override void AssertLogarithmicAddition()
        {
            LevelToCarrier v = LevelToCarrier.FromDecibelsCarrier(40);
            AssertEx.EqualTolerance(43.0102999566, (v + v).DecibelsCarrier, DecibelsCarrierTolerance);
        }

        /// <inheritdoc/>
        protected override void AssertLogarithmicSubtraction()
        {
            LevelToCarrier v = LevelToCarrier.FromDecibelsCarrier(40);
            AssertEx.EqualTolerance(49.5424250944, (LevelToCarrier.FromDecibelsCarrier(50) - v).DecibelsCarrier, DecibelsCarrierTolerance);
        }

        [Theory]
        [InlineData(0, 1)]
        [InlineData(-1, 1)]
        public void InvalidSignal_ExpectArgumentOutOfRangeException(double signalValue, double referenceValue)
        {
            // signal can't be zero or less than zero if reference is positive.
            var signal = Power.From(signalValue, Units.PowerUnit.Watt);
            var reference = Power.From(referenceValue, Units.PowerUnit.Watt);

            Assert.Throws<ArgumentOutOfRangeException>(() => new LevelToCarrier(signal, reference));
        }

        [Theory]
        [InlineData(1, 0)]
        [InlineData(10, -1)]
        public void InvalidReference_ExpectArgumentOutOfRangeException(double signalValue, double referenceValue)
        {
            // reference can't be zero or less than zero if quantity is postive.
            var signal = Power.From(signalValue, Units.PowerUnit.Watt);
            var reference = Power.From(referenceValue, Units.PowerUnit.Watt);

            Assert.Throws<ArgumentOutOfRangeException>(() => new LevelToCarrier(signal, reference));
        }
    }
}
